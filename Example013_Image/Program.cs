/* Код, который позволяет закрасить какую-то область в заданной картинке.*/

/* Определим двумерный массив, представляющий наше изображение.*/
int[,] pic = new int[,]
{
 /*Здесь будет какая-то заданная картинка в виде массива.*/
   {0,0,0,0,0,0,0,0,0},
   {0,0,0,1,1,1,0,0,0},
   {0,0,1,0,0,0,1,0,0},
   {0,0,1,0,0,0,1,0,0},
   {0,0,1,0,0,0,1,0,0},
   {0,0,0,1,1,1,0,0,0},
   {0,0,0,0,0,0,0,0,0},
/* И так далее.*/
};

/* Опишем метод, который будет выводить нашу картинку.*/
void PrintImage(int[,] image)
{
    for (int i = 0; i < image.GetLength(0); i++) /* Далее перебираем строки. 
                                                   Для общего случая можно написать 
                                                   количество строк так- image.GetLength(0),
                                                   где (0)- означает строки. */
    {
        for (int j = 0; j < image.GetLength(0); j++)   /* (0)- означает столбцы.*/
        {
            if (image[i, j] == 0) Console.Write($" "); /* Если элемент [i,j] совпадает с нулём,
                                                          то будем печатать пробел.*/
            else Console.Write($"+");                  /* Иначе будем печатать (+).*/

        }
        Console.WriteLine(); /* Пустая строка.*/
    }
}

/* Создадим метод, который будет закрашивать нашу картинку.*/

void FillImage(int row, int col) /* В качестве аргумента укажем позицию строки (row)
                                    и пикселя (col), с которого мы начнём закраску.*/
{
    if (pic[row, col] == 0) /* Если элемент с позицией [row,cpl] == 0 (не закрашен), то...*/
    {
        pic[row, col] = 2; /* Закрасим его, например, двойкой (2).*/

        /* Далее определяем правило: что идёт за чем.*/
        FillImage(row - 1, col); /* Сначала поднимаемся на строчку выше.*/
        FillImage(row, col - 1); /* В той же строке, но влево (позицию столбика меняем на (-1)).*/
        FillImage(row + 1, col); /* Идём вниз (увеличиваем позицию строки).*/
        FillImage(row, col + 1); /* Идём вправо, оставаясь в той же строке.*/
    }
}

// Вызов метода
PrintImage(pic); /* В качестве аргумента мы передаём наш массив (pic),
                    который содержит в себе картринку. Первый вызов этого метода не закрашен.*/
FillImage(3, 4); /* В качестве случайной точки укажем точку (3,4),
                    но эта точка должна быть внутри нашего рисунка.*/
PrintImage(pic); /* Второй вызов этого метода закрашеный.*/
