// Перебор слов.
/* В некотором машинном алфавите имеются четыре буквы: "а", "и", "с" и "в". Покажите все слова, 
   состоящие из Т букв, которые можно составить из этого алфавита.*/

// Итеративный метод.
// char[] s = { 'а', 'и', 'с', 'в' }; /* Зададим алфавит, который будет храниться в массиве символов.*/
// int count = s.Length; /* Переменной (count) присвоим длину массива.*/
 int n = 1; /* Количество вариантов.*/
// for (int i = 0; i < count; i++)
// {
//     Console.WriteLine($"{n++,-5} {s[i]}"); /* Получатся однобуквенные слова. (-5) здесь- это 
//                                                количество пробелов от указателя (n) до слова.*/
// }

// /* Если потребуются двубуквенные слова будем использовать цикл в цикле, если трёхбуквенные, 
//    то цикл вцикле в цикле и т.д.*/
// for (int i = 0; i < count; i++)
// {
//     for (int j = 0; j < count; j++)
//     {
//         Console.WriteLine($"{n++,-5} {s[i]} {s[j]}"); /* Получатся двубуквенные слова. (-5) здесь- это 
//                                                          количество пробелов от указателя (n) до слова.*/
//     }
// }

// // Трёхбуквенные.
// for (int i = 0; i < count; i++)
// {
//     for (int j = 0; j < count; j++)
//     {
//         for (int k = 0; k < count; k++)
//         {
//             Console.WriteLine($"{n++,-5} {s[i]} {s[j]} {s[k]}"); /* Получатся трёхуквенные слова. (-5) здесь- это 
//                                                           количество пробелов от указателя (n) до слова.*/
//         }
//     }
// }

// Рекурсивный метод.

void FindWords(string alphabet, char[] word, int length = 0) /* Создаём метод, который принимает тот 
самый алфавит (string alphabet- в данном случае передаём его строкой), массив из букв (char[] word), 
которые будут составлять новое слово, далее, на текущей итерации будет собираться длина этого слова.*/
{
    if (length == word.Length) /* Описываем условия выхода из рекурсии: если длина нашего массива совпала 
с текущей длиной, которую мы получили на текущем вызове рекурсии, то...*/
    {
        Console.WriteLine($"{n++} {new String(word)}"); return; /* мы будем показывать это слово и заканчивать.*/
    }

    for (int i = 0; i < alphabet.Length; i++) /* В противном случае, нужно запустить цикл по всем элементам 
                                            алфавита, чтобы собрать новое, очередное, слово.*/
    {
        word[length] = alphabet[i];
        FindWords(alphabet, word, length + 1);
    }
}
FindWords("аисв", new char[2]); /* Число [2]- означает, что мы ходим получить все двубуквенные слова. 
Количество слов будет равно заданному количеству букв (у нас их 4) в степени равной из скольких букв 
вы хотите увидеть слова. Например: если задано 4 буквы и вы хотите увидеть все двубуквенные слова, 
которые можно составить из этих четырёх букв, то будет 4 во второй степени вариантов, т.е. 16.*/